// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

// QrTarget is the model entity for the QrTarget schema.
type QrTarget struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// TargetTypeID holds the value of the "target_type_id" field.
	TargetTypeID int `json:"target_type_id"`
	// Target holds the value of the "target" field.
	Target *string `json:"target"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QrTargetQuery when eager-loading is set.
	Edges        QrTargetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QrTargetEdges holds the relations/edges for other nodes in the graph.
type QrTargetEdges struct {
	// Targettype holds the value of the targettype edge.
	Targettype *TargetType `json:"targettype,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TargettypeOrErr returns the Targettype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QrTargetEdges) TargettypeOrErr() (*TargetType, error) {
	if e.Targettype != nil {
		return e.Targettype, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: targettype.Label}
	}
	return nil, &NotLoadedError{edge: "targettype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QrTarget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case qrtarget.FieldTargetTypeID:
			values[i] = new(sql.NullInt64)
		case qrtarget.FieldTarget:
			values[i] = new(sql.NullString)
		case qrtarget.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QrTarget fields.
func (qt *QrTarget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qrtarget.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				qt.ID = *value
			}
		case qrtarget.FieldTargetTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_type_id", values[i])
			} else if value.Valid {
				qt.TargetTypeID = int(value.Int64)
			}
		case qrtarget.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				qt.Target = new(string)
				*qt.Target = value.String
			}
		default:
			qt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QrTarget.
// This includes values selected through modifiers, order, etc.
func (qt *QrTarget) Value(name string) (ent.Value, error) {
	return qt.selectValues.Get(name)
}

// QueryTargettype queries the "targettype" edge of the QrTarget entity.
func (qt *QrTarget) QueryTargettype() *TargetTypeQuery {
	return NewQrTargetClient(qt.config).QueryTargettype(qt)
}

// Update returns a builder for updating this QrTarget.
// Note that you need to call QrTarget.Unwrap() before calling this method if this QrTarget
// was returned from a transaction, and the transaction was committed or rolled back.
func (qt *QrTarget) Update() *QrTargetUpdateOne {
	return NewQrTargetClient(qt.config).UpdateOne(qt)
}

// Unwrap unwraps the QrTarget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qt *QrTarget) Unwrap() *QrTarget {
	_tx, ok := qt.config.driver.(*txDriver)
	if !ok {
		panic("ent: QrTarget is not a transactional entity")
	}
	qt.config.driver = _tx.drv
	return qt
}

// String implements the fmt.Stringer.
func (qt *QrTarget) String() string {
	var builder strings.Builder
	builder.WriteString("QrTarget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qt.ID))
	builder.WriteString("target_type_id=")
	builder.WriteString(fmt.Sprintf("%v", qt.TargetTypeID))
	builder.WriteString(", ")
	if v := qt.Target; v != nil {
		builder.WriteString("target=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// QrTargets is a parsable slice of QrTarget.
type QrTargets []*QrTarget
