// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"qr.mandacode.com/redirect/ent/predicate"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

// QrTargetUpdate is the builder for updating QrTarget entities.
type QrTargetUpdate struct {
	config
	hooks    []Hook
	mutation *QrTargetMutation
}

// Where appends a list predicates to the QrTargetUpdate builder.
func (qtu *QrTargetUpdate) Where(ps ...predicate.QrTarget) *QrTargetUpdate {
	qtu.mutation.Where(ps...)
	return qtu
}

// SetTargetTypeID sets the "target_type_id" field.
func (qtu *QrTargetUpdate) SetTargetTypeID(i int) *QrTargetUpdate {
	qtu.mutation.SetTargetTypeID(i)
	return qtu
}

// SetNillableTargetTypeID sets the "target_type_id" field if the given value is not nil.
func (qtu *QrTargetUpdate) SetNillableTargetTypeID(i *int) *QrTargetUpdate {
	if i != nil {
		qtu.SetTargetTypeID(*i)
	}
	return qtu
}

// SetTarget sets the "target" field.
func (qtu *QrTargetUpdate) SetTarget(s string) *QrTargetUpdate {
	qtu.mutation.SetTarget(s)
	return qtu
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (qtu *QrTargetUpdate) SetNillableTarget(s *string) *QrTargetUpdate {
	if s != nil {
		qtu.SetTarget(*s)
	}
	return qtu
}

// ClearTarget clears the value of the "target" field.
func (qtu *QrTargetUpdate) ClearTarget() *QrTargetUpdate {
	qtu.mutation.ClearTarget()
	return qtu
}

// SetTargettypeID sets the "targettype" edge to the TargetType entity by ID.
func (qtu *QrTargetUpdate) SetTargettypeID(id int) *QrTargetUpdate {
	qtu.mutation.SetTargettypeID(id)
	return qtu
}

// SetTargettype sets the "targettype" edge to the TargetType entity.
func (qtu *QrTargetUpdate) SetTargettype(t *TargetType) *QrTargetUpdate {
	return qtu.SetTargettypeID(t.ID)
}

// Mutation returns the QrTargetMutation object of the builder.
func (qtu *QrTargetUpdate) Mutation() *QrTargetMutation {
	return qtu.mutation
}

// ClearTargettype clears the "targettype" edge to the TargetType entity.
func (qtu *QrTargetUpdate) ClearTargettype() *QrTargetUpdate {
	qtu.mutation.ClearTargettype()
	return qtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qtu *QrTargetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qtu.sqlSave, qtu.mutation, qtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qtu *QrTargetUpdate) SaveX(ctx context.Context) int {
	affected, err := qtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qtu *QrTargetUpdate) Exec(ctx context.Context) error {
	_, err := qtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtu *QrTargetUpdate) ExecX(ctx context.Context) {
	if err := qtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtu *QrTargetUpdate) check() error {
	if v, ok := qtu.mutation.TargetTypeID(); ok {
		if err := qrtarget.TargetTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "target_type_id", err: fmt.Errorf(`ent: validator failed for field "QrTarget.target_type_id": %w`, err)}
		}
	}
	if qtu.mutation.TargettypeCleared() && len(qtu.mutation.TargettypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QrTarget.targettype"`)
	}
	return nil
}

func (qtu *QrTargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrtarget.Table, qrtarget.Columns, sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID))
	if ps := qtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qtu.mutation.Target(); ok {
		_spec.SetField(qrtarget.FieldTarget, field.TypeString, value)
	}
	if qtu.mutation.TargetCleared() {
		_spec.ClearField(qrtarget.FieldTarget, field.TypeString)
	}
	if qtu.mutation.TargettypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrtarget.TargettypeTable,
			Columns: []string{qrtarget.TargettypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtu.mutation.TargettypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrtarget.TargettypeTable,
			Columns: []string{qrtarget.TargettypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrtarget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qtu.mutation.done = true
	return n, nil
}

// QrTargetUpdateOne is the builder for updating a single QrTarget entity.
type QrTargetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QrTargetMutation
}

// SetTargetTypeID sets the "target_type_id" field.
func (qtuo *QrTargetUpdateOne) SetTargetTypeID(i int) *QrTargetUpdateOne {
	qtuo.mutation.SetTargetTypeID(i)
	return qtuo
}

// SetNillableTargetTypeID sets the "target_type_id" field if the given value is not nil.
func (qtuo *QrTargetUpdateOne) SetNillableTargetTypeID(i *int) *QrTargetUpdateOne {
	if i != nil {
		qtuo.SetTargetTypeID(*i)
	}
	return qtuo
}

// SetTarget sets the "target" field.
func (qtuo *QrTargetUpdateOne) SetTarget(s string) *QrTargetUpdateOne {
	qtuo.mutation.SetTarget(s)
	return qtuo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (qtuo *QrTargetUpdateOne) SetNillableTarget(s *string) *QrTargetUpdateOne {
	if s != nil {
		qtuo.SetTarget(*s)
	}
	return qtuo
}

// ClearTarget clears the value of the "target" field.
func (qtuo *QrTargetUpdateOne) ClearTarget() *QrTargetUpdateOne {
	qtuo.mutation.ClearTarget()
	return qtuo
}

// SetTargettypeID sets the "targettype" edge to the TargetType entity by ID.
func (qtuo *QrTargetUpdateOne) SetTargettypeID(id int) *QrTargetUpdateOne {
	qtuo.mutation.SetTargettypeID(id)
	return qtuo
}

// SetTargettype sets the "targettype" edge to the TargetType entity.
func (qtuo *QrTargetUpdateOne) SetTargettype(t *TargetType) *QrTargetUpdateOne {
	return qtuo.SetTargettypeID(t.ID)
}

// Mutation returns the QrTargetMutation object of the builder.
func (qtuo *QrTargetUpdateOne) Mutation() *QrTargetMutation {
	return qtuo.mutation
}

// ClearTargettype clears the "targettype" edge to the TargetType entity.
func (qtuo *QrTargetUpdateOne) ClearTargettype() *QrTargetUpdateOne {
	qtuo.mutation.ClearTargettype()
	return qtuo
}

// Where appends a list predicates to the QrTargetUpdate builder.
func (qtuo *QrTargetUpdateOne) Where(ps ...predicate.QrTarget) *QrTargetUpdateOne {
	qtuo.mutation.Where(ps...)
	return qtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qtuo *QrTargetUpdateOne) Select(field string, fields ...string) *QrTargetUpdateOne {
	qtuo.fields = append([]string{field}, fields...)
	return qtuo
}

// Save executes the query and returns the updated QrTarget entity.
func (qtuo *QrTargetUpdateOne) Save(ctx context.Context) (*QrTarget, error) {
	return withHooks(ctx, qtuo.sqlSave, qtuo.mutation, qtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qtuo *QrTargetUpdateOne) SaveX(ctx context.Context) *QrTarget {
	node, err := qtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qtuo *QrTargetUpdateOne) Exec(ctx context.Context) error {
	_, err := qtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtuo *QrTargetUpdateOne) ExecX(ctx context.Context) {
	if err := qtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtuo *QrTargetUpdateOne) check() error {
	if v, ok := qtuo.mutation.TargetTypeID(); ok {
		if err := qrtarget.TargetTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "target_type_id", err: fmt.Errorf(`ent: validator failed for field "QrTarget.target_type_id": %w`, err)}
		}
	}
	if qtuo.mutation.TargettypeCleared() && len(qtuo.mutation.TargettypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QrTarget.targettype"`)
	}
	return nil
}

func (qtuo *QrTargetUpdateOne) sqlSave(ctx context.Context) (_node *QrTarget, err error) {
	if err := qtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrtarget.Table, qrtarget.Columns, sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID))
	id, ok := qtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QrTarget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qrtarget.FieldID)
		for _, f := range fields {
			if !qrtarget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qrtarget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qtuo.mutation.Target(); ok {
		_spec.SetField(qrtarget.FieldTarget, field.TypeString, value)
	}
	if qtuo.mutation.TargetCleared() {
		_spec.ClearField(qrtarget.FieldTarget, field.TypeString)
	}
	if qtuo.mutation.TargettypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrtarget.TargettypeTable,
			Columns: []string{qrtarget.TargettypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtuo.mutation.TargettypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrtarget.TargettypeTable,
			Columns: []string{qrtarget.TargettypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QrTarget{config: qtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrtarget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qtuo.mutation.done = true
	return _node, nil
}
