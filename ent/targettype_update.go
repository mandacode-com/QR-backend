// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/predicate"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

// TargetTypeUpdate is the builder for updating TargetType entities.
type TargetTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TargetTypeMutation
}

// Where appends a list predicates to the TargetTypeUpdate builder.
func (ttu *TargetTypeUpdate) Where(ps ...predicate.TargetType) *TargetTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetType sets the "type" field.
func (ttu *TargetTypeUpdate) SetType(s string) *TargetTypeUpdate {
	ttu.mutation.SetType(s)
	return ttu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ttu *TargetTypeUpdate) SetNillableType(s *string) *TargetTypeUpdate {
	if s != nil {
		ttu.SetType(*s)
	}
	return ttu
}

// AddQrTargetIDs adds the "qr_targets" edge to the QrTarget entity by IDs.
func (ttu *TargetTypeUpdate) AddQrTargetIDs(ids ...uuid.UUID) *TargetTypeUpdate {
	ttu.mutation.AddQrTargetIDs(ids...)
	return ttu
}

// AddQrTargets adds the "qr_targets" edges to the QrTarget entity.
func (ttu *TargetTypeUpdate) AddQrTargets(q ...*QrTarget) *TargetTypeUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttu.AddQrTargetIDs(ids...)
}

// Mutation returns the TargetTypeMutation object of the builder.
func (ttu *TargetTypeUpdate) Mutation() *TargetTypeMutation {
	return ttu.mutation
}

// ClearQrTargets clears all "qr_targets" edges to the QrTarget entity.
func (ttu *TargetTypeUpdate) ClearQrTargets() *TargetTypeUpdate {
	ttu.mutation.ClearQrTargets()
	return ttu
}

// RemoveQrTargetIDs removes the "qr_targets" edge to QrTarget entities by IDs.
func (ttu *TargetTypeUpdate) RemoveQrTargetIDs(ids ...uuid.UUID) *TargetTypeUpdate {
	ttu.mutation.RemoveQrTargetIDs(ids...)
	return ttu
}

// RemoveQrTargets removes "qr_targets" edges to QrTarget entities.
func (ttu *TargetTypeUpdate) RemoveQrTargets(q ...*QrTarget) *TargetTypeUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttu.RemoveQrTargetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TargetTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TargetTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TargetTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TargetTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TargetTypeUpdate) check() error {
	if v, ok := ttu.mutation.GetType(); ok {
		if err := targettype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TargetType.type": %w`, err)}
		}
	}
	return nil
}

func (ttu *TargetTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(targettype.Table, targettype.Columns, sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.GetType(); ok {
		_spec.SetField(targettype.FieldType, field.TypeString, value)
	}
	if ttu.mutation.QrTargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedQrTargetsIDs(); len(nodes) > 0 && !ttu.mutation.QrTargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.QrTargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{targettype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TargetTypeUpdateOne is the builder for updating a single TargetType entity.
type TargetTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TargetTypeMutation
}

// SetType sets the "type" field.
func (ttuo *TargetTypeUpdateOne) SetType(s string) *TargetTypeUpdateOne {
	ttuo.mutation.SetType(s)
	return ttuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ttuo *TargetTypeUpdateOne) SetNillableType(s *string) *TargetTypeUpdateOne {
	if s != nil {
		ttuo.SetType(*s)
	}
	return ttuo
}

// AddQrTargetIDs adds the "qr_targets" edge to the QrTarget entity by IDs.
func (ttuo *TargetTypeUpdateOne) AddQrTargetIDs(ids ...uuid.UUID) *TargetTypeUpdateOne {
	ttuo.mutation.AddQrTargetIDs(ids...)
	return ttuo
}

// AddQrTargets adds the "qr_targets" edges to the QrTarget entity.
func (ttuo *TargetTypeUpdateOne) AddQrTargets(q ...*QrTarget) *TargetTypeUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttuo.AddQrTargetIDs(ids...)
}

// Mutation returns the TargetTypeMutation object of the builder.
func (ttuo *TargetTypeUpdateOne) Mutation() *TargetTypeMutation {
	return ttuo.mutation
}

// ClearQrTargets clears all "qr_targets" edges to the QrTarget entity.
func (ttuo *TargetTypeUpdateOne) ClearQrTargets() *TargetTypeUpdateOne {
	ttuo.mutation.ClearQrTargets()
	return ttuo
}

// RemoveQrTargetIDs removes the "qr_targets" edge to QrTarget entities by IDs.
func (ttuo *TargetTypeUpdateOne) RemoveQrTargetIDs(ids ...uuid.UUID) *TargetTypeUpdateOne {
	ttuo.mutation.RemoveQrTargetIDs(ids...)
	return ttuo
}

// RemoveQrTargets removes "qr_targets" edges to QrTarget entities.
func (ttuo *TargetTypeUpdateOne) RemoveQrTargets(q ...*QrTarget) *TargetTypeUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttuo.RemoveQrTargetIDs(ids...)
}

// Where appends a list predicates to the TargetTypeUpdate builder.
func (ttuo *TargetTypeUpdateOne) Where(ps ...predicate.TargetType) *TargetTypeUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TargetTypeUpdateOne) Select(field string, fields ...string) *TargetTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TargetType entity.
func (ttuo *TargetTypeUpdateOne) Save(ctx context.Context) (*TargetType, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TargetTypeUpdateOne) SaveX(ctx context.Context) *TargetType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TargetTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TargetTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TargetTypeUpdateOne) check() error {
	if v, ok := ttuo.mutation.GetType(); ok {
		if err := targettype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TargetType.type": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TargetTypeUpdateOne) sqlSave(ctx context.Context) (_node *TargetType, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(targettype.Table, targettype.Columns, sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TargetType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, targettype.FieldID)
		for _, f := range fields {
			if !targettype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != targettype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.GetType(); ok {
		_spec.SetField(targettype.FieldType, field.TypeString, value)
	}
	if ttuo.mutation.QrTargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedQrTargetsIDs(); len(nodes) > 0 && !ttuo.mutation.QrTargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.QrTargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TargetType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{targettype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
