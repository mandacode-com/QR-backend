// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"qr.mandacode.com/redirect/ent/targettype"
)

// TargetType is the model entity for the TargetType schema.
type TargetType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id"`
	// Type holds the value of the "type" field.
	Type string `json:"type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TargetTypeQuery when eager-loading is set.
	Edges        TargetTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TargetTypeEdges holds the relations/edges for other nodes in the graph.
type TargetTypeEdges struct {
	// QrTargets holds the value of the qr_targets edge.
	QrTargets []*QrTarget `json:"qr_targets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QrTargetsOrErr returns the QrTargets value or an error if the edge
// was not loaded in eager-loading.
func (e TargetTypeEdges) QrTargetsOrErr() ([]*QrTarget, error) {
	if e.loadedTypes[0] {
		return e.QrTargets, nil
	}
	return nil, &NotLoadedError{edge: "qr_targets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TargetType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case targettype.FieldID:
			values[i] = new(sql.NullInt64)
		case targettype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TargetType fields.
func (tt *TargetType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case targettype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case targettype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tt.Type = value.String
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TargetType.
// This includes values selected through modifiers, order, etc.
func (tt *TargetType) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryQrTargets queries the "qr_targets" edge of the TargetType entity.
func (tt *TargetType) QueryQrTargets() *QrTargetQuery {
	return NewTargetTypeClient(tt.config).QueryQrTargets(tt)
}

// Update returns a builder for updating this TargetType.
// Note that you need to call TargetType.Unwrap() before calling this method if this TargetType
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TargetType) Update() *TargetTypeUpdateOne {
	return NewTargetTypeClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TargetType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TargetType) Unwrap() *TargetType {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TargetType is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TargetType) String() string {
	var builder strings.Builder
	builder.WriteString("TargetType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("type=")
	builder.WriteString(tt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// TargetTypes is a parsable slice of TargetType.
type TargetTypes []*TargetType
