// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

// TargetTypeCreate is the builder for creating a TargetType entity.
type TargetTypeCreate struct {
	config
	mutation *TargetTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ttc *TargetTypeCreate) SetType(s string) *TargetTypeCreate {
	ttc.mutation.SetType(s)
	return ttc
}

// SetID sets the "id" field.
func (ttc *TargetTypeCreate) SetID(i int) *TargetTypeCreate {
	ttc.mutation.SetID(i)
	return ttc
}

// AddQrTargetIDs adds the "qr_targets" edge to the QrTarget entity by IDs.
func (ttc *TargetTypeCreate) AddQrTargetIDs(ids ...uuid.UUID) *TargetTypeCreate {
	ttc.mutation.AddQrTargetIDs(ids...)
	return ttc
}

// AddQrTargets adds the "qr_targets" edges to the QrTarget entity.
func (ttc *TargetTypeCreate) AddQrTargets(q ...*QrTarget) *TargetTypeCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttc.AddQrTargetIDs(ids...)
}

// Mutation returns the TargetTypeMutation object of the builder.
func (ttc *TargetTypeCreate) Mutation() *TargetTypeMutation {
	return ttc.mutation
}

// Save creates the TargetType in the database.
func (ttc *TargetTypeCreate) Save(ctx context.Context) (*TargetType, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TargetTypeCreate) SaveX(ctx context.Context) *TargetType {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TargetTypeCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TargetTypeCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TargetTypeCreate) check() error {
	if _, ok := ttc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TargetType.type"`)}
	}
	if v, ok := ttc.mutation.GetType(); ok {
		if err := targettype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TargetType.type": %w`, err)}
		}
	}
	if v, ok := ttc.mutation.ID(); ok {
		if err := targettype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TargetType.id": %w`, err)}
		}
	}
	return nil
}

func (ttc *TargetTypeCreate) sqlSave(ctx context.Context) (*TargetType, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TargetTypeCreate) createSpec() (*TargetType, *sqlgraph.CreateSpec) {
	var (
		_node = &TargetType{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(targettype.Table, sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt))
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ttc.mutation.GetType(); ok {
		_spec.SetField(targettype.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := ttc.mutation.QrTargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   targettype.QrTargetsTable,
			Columns: []string{targettype.QrTargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TargetTypeCreateBulk is the builder for creating many TargetType entities in bulk.
type TargetTypeCreateBulk struct {
	config
	err      error
	builders []*TargetTypeCreate
}

// Save creates the TargetType entities in the database.
func (ttcb *TargetTypeCreateBulk) Save(ctx context.Context) ([]*TargetType, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TargetType, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TargetTypeCreateBulk) SaveX(ctx context.Context) []*TargetType {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TargetTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TargetTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
