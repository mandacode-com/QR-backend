// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

// QrTargetCreate is the builder for creating a QrTarget entity.
type QrTargetCreate struct {
	config
	mutation *QrTargetMutation
	hooks    []Hook
}

// SetTargetTypeID sets the "target_type_id" field.
func (qtc *QrTargetCreate) SetTargetTypeID(i int) *QrTargetCreate {
	qtc.mutation.SetTargetTypeID(i)
	return qtc
}

// SetTarget sets the "target" field.
func (qtc *QrTargetCreate) SetTarget(s string) *QrTargetCreate {
	qtc.mutation.SetTarget(s)
	return qtc
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (qtc *QrTargetCreate) SetNillableTarget(s *string) *QrTargetCreate {
	if s != nil {
		qtc.SetTarget(*s)
	}
	return qtc
}

// SetID sets the "id" field.
func (qtc *QrTargetCreate) SetID(u uuid.UUID) *QrTargetCreate {
	qtc.mutation.SetID(u)
	return qtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qtc *QrTargetCreate) SetNillableID(u *uuid.UUID) *QrTargetCreate {
	if u != nil {
		qtc.SetID(*u)
	}
	return qtc
}

// SetTargettypeID sets the "targettype" edge to the TargetType entity by ID.
func (qtc *QrTargetCreate) SetTargettypeID(id int) *QrTargetCreate {
	qtc.mutation.SetTargettypeID(id)
	return qtc
}

// SetTargettype sets the "targettype" edge to the TargetType entity.
func (qtc *QrTargetCreate) SetTargettype(t *TargetType) *QrTargetCreate {
	return qtc.SetTargettypeID(t.ID)
}

// Mutation returns the QrTargetMutation object of the builder.
func (qtc *QrTargetCreate) Mutation() *QrTargetMutation {
	return qtc.mutation
}

// Save creates the QrTarget in the database.
func (qtc *QrTargetCreate) Save(ctx context.Context) (*QrTarget, error) {
	qtc.defaults()
	return withHooks(ctx, qtc.sqlSave, qtc.mutation, qtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qtc *QrTargetCreate) SaveX(ctx context.Context) *QrTarget {
	v, err := qtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtc *QrTargetCreate) Exec(ctx context.Context) error {
	_, err := qtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtc *QrTargetCreate) ExecX(ctx context.Context) {
	if err := qtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qtc *QrTargetCreate) defaults() {
	if _, ok := qtc.mutation.ID(); !ok {
		v := qrtarget.DefaultID()
		qtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtc *QrTargetCreate) check() error {
	if _, ok := qtc.mutation.TargetTypeID(); !ok {
		return &ValidationError{Name: "target_type_id", err: errors.New(`ent: missing required field "QrTarget.target_type_id"`)}
	}
	if v, ok := qtc.mutation.TargetTypeID(); ok {
		if err := qrtarget.TargetTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "target_type_id", err: fmt.Errorf(`ent: validator failed for field "QrTarget.target_type_id": %w`, err)}
		}
	}
	if len(qtc.mutation.TargettypeIDs()) == 0 {
		return &ValidationError{Name: "targettype", err: errors.New(`ent: missing required edge "QrTarget.targettype"`)}
	}
	return nil
}

func (qtc *QrTargetCreate) sqlSave(ctx context.Context) (*QrTarget, error) {
	if err := qtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qtc.mutation.id = &_node.ID
	qtc.mutation.done = true
	return _node, nil
}

func (qtc *QrTargetCreate) createSpec() (*QrTarget, *sqlgraph.CreateSpec) {
	var (
		_node = &QrTarget{config: qtc.config}
		_spec = sqlgraph.NewCreateSpec(qrtarget.Table, sqlgraph.NewFieldSpec(qrtarget.FieldID, field.TypeUUID))
	)
	if id, ok := qtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qtc.mutation.Target(); ok {
		_spec.SetField(qrtarget.FieldTarget, field.TypeString, value)
		_node.Target = &value
	}
	if nodes := qtc.mutation.TargettypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrtarget.TargettypeTable,
			Columns: []string{qrtarget.TargettypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targettype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QrTargetCreateBulk is the builder for creating many QrTarget entities in bulk.
type QrTargetCreateBulk struct {
	config
	err      error
	builders []*QrTargetCreate
}

// Save creates the QrTarget entities in the database.
func (qtcb *QrTargetCreateBulk) Save(ctx context.Context) ([]*QrTarget, error) {
	if qtcb.err != nil {
		return nil, qtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qtcb.builders))
	nodes := make([]*QrTarget, len(qtcb.builders))
	mutators := make([]Mutator, len(qtcb.builders))
	for i := range qtcb.builders {
		func(i int, root context.Context) {
			builder := qtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QrTargetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qtcb *QrTargetCreateBulk) SaveX(ctx context.Context) []*QrTarget {
	v, err := qtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtcb *QrTargetCreateBulk) Exec(ctx context.Context) error {
	_, err := qtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtcb *QrTargetCreateBulk) ExecX(ctx context.Context) {
	if err := qtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
