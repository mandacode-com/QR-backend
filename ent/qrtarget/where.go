// Code generated by ent, DO NOT EDIT.

package qrtarget

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldLTE(FieldID, id))
}

// TargetTypeID applies equality check predicate on the "target_type_id" field. It's identical to TargetTypeIDEQ.
func TargetTypeID(v int) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldTargetTypeID, v))
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldTarget, v))
}

// TargetTypeIDEQ applies the EQ predicate on the "target_type_id" field.
func TargetTypeIDEQ(v int) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldTargetTypeID, v))
}

// TargetTypeIDNEQ applies the NEQ predicate on the "target_type_id" field.
func TargetTypeIDNEQ(v int) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNEQ(FieldTargetTypeID, v))
}

// TargetTypeIDIn applies the In predicate on the "target_type_id" field.
func TargetTypeIDIn(vs ...int) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldIn(FieldTargetTypeID, vs...))
}

// TargetTypeIDNotIn applies the NotIn predicate on the "target_type_id" field.
func TargetTypeIDNotIn(vs ...int) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNotIn(FieldTargetTypeID, vs...))
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEQ(FieldTarget, v))
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNEQ(FieldTarget, v))
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldIn(FieldTarget, vs...))
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNotIn(FieldTarget, vs...))
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldGT(FieldTarget, v))
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldGTE(FieldTarget, v))
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldLT(FieldTarget, v))
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldLTE(FieldTarget, v))
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldContains(FieldTarget, v))
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldHasPrefix(FieldTarget, v))
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldHasSuffix(FieldTarget, v))
}

// TargetIsNil applies the IsNil predicate on the "target" field.
func TargetIsNil() predicate.QrTarget {
	return predicate.QrTarget(sql.FieldIsNull(FieldTarget))
}

// TargetNotNil applies the NotNil predicate on the "target" field.
func TargetNotNil() predicate.QrTarget {
	return predicate.QrTarget(sql.FieldNotNull(FieldTarget))
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldEqualFold(FieldTarget, v))
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.QrTarget {
	return predicate.QrTarget(sql.FieldContainsFold(FieldTarget, v))
}

// HasTargettype applies the HasEdge predicate on the "targettype" edge.
func HasTargettype() predicate.QrTarget {
	return predicate.QrTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargettypeTable, TargettypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargettypeWith applies the HasEdge predicate on the "targettype" edge with a given conditions (other predicates).
func HasTargettypeWith(preds ...predicate.TargetType) predicate.QrTarget {
	return predicate.QrTarget(func(s *sql.Selector) {
		step := newTargettypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QrTarget) predicate.QrTarget {
	return predicate.QrTarget(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QrTarget) predicate.QrTarget {
	return predicate.QrTarget(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QrTarget) predicate.QrTarget {
	return predicate.QrTarget(sql.NotPredicates(p))
}
