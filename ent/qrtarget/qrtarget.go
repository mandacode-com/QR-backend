// Code generated by ent, DO NOT EDIT.

package qrtarget

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the qrtarget type in the database.
	Label = "qr_target"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTargetTypeID holds the string denoting the target_type_id field in the database.
	FieldTargetTypeID = "target_type_id"
	// FieldTarget holds the string denoting the target field in the database.
	FieldTarget = "target"
	// EdgeTargettype holds the string denoting the targettype edge name in mutations.
	EdgeTargettype = "targettype"
	// Table holds the table name of the qrtarget in the database.
	Table = "qr_targets"
	// TargettypeTable is the table that holds the targettype relation/edge.
	TargettypeTable = "qr_targets"
	// TargettypeInverseTable is the table name for the TargetType entity.
	// It exists in this package in order to avoid circular dependency with the "targettype" package.
	TargettypeInverseTable = "target_types"
	// TargettypeColumn is the table column denoting the targettype relation/edge.
	TargettypeColumn = "target_type_id"
)

// Columns holds all SQL columns for qrtarget fields.
var Columns = []string{
	FieldID,
	FieldTargetTypeID,
	FieldTarget,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TargetTypeIDValidator is a validator for the "target_type_id" field. It is called by the builders before save.
	TargetTypeIDValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the QrTarget queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTargetTypeID orders the results by the target_type_id field.
func ByTargetTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetTypeID, opts...).ToFunc()
}

// ByTarget orders the results by the target field.
func ByTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTarget, opts...).ToFunc()
}

// ByTargettypeField orders the results by targettype field.
func ByTargettypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargettypeStep(), sql.OrderByField(field, opts...))
	}
}
func newTargettypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargettypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TargettypeTable, TargettypeColumn),
	)
}
