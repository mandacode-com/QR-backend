// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"qr.mandacode.com/redirect/ent/predicate"
	"qr.mandacode.com/redirect/ent/qrtarget"
	"qr.mandacode.com/redirect/ent/targettype"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeQrTarget   = "QrTarget"
	TypeTargetType = "TargetType"
)

// QrTargetMutation represents an operation that mutates the QrTarget nodes in the graph.
type QrTargetMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	target            *string
	clearedFields     map[string]struct{}
	targettype        *int
	clearedtargettype bool
	done              bool
	oldValue          func(context.Context) (*QrTarget, error)
	predicates        []predicate.QrTarget
}

var _ ent.Mutation = (*QrTargetMutation)(nil)

// qrtargetOption allows management of the mutation configuration using functional options.
type qrtargetOption func(*QrTargetMutation)

// newQrTargetMutation creates new mutation for the QrTarget entity.
func newQrTargetMutation(c config, op Op, opts ...qrtargetOption) *QrTargetMutation {
	m := &QrTargetMutation{
		config:        c,
		op:            op,
		typ:           TypeQrTarget,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQrTargetID sets the ID field of the mutation.
func withQrTargetID(id uuid.UUID) qrtargetOption {
	return func(m *QrTargetMutation) {
		var (
			err   error
			once  sync.Once
			value *QrTarget
		)
		m.oldValue = func(ctx context.Context) (*QrTarget, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QrTarget.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQrTarget sets the old QrTarget of the mutation.
func withQrTarget(node *QrTarget) qrtargetOption {
	return func(m *QrTargetMutation) {
		m.oldValue = func(context.Context) (*QrTarget, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QrTargetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QrTargetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of QrTarget entities.
func (m *QrTargetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QrTargetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QrTargetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QrTarget.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTargetTypeID sets the "target_type_id" field.
func (m *QrTargetMutation) SetTargetTypeID(i int) {
	m.targettype = &i
}

// TargetTypeID returns the value of the "target_type_id" field in the mutation.
func (m *QrTargetMutation) TargetTypeID() (r int, exists bool) {
	v := m.targettype
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetTypeID returns the old "target_type_id" field's value of the QrTarget entity.
// If the QrTarget object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrTargetMutation) OldTargetTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetTypeID: %w", err)
	}
	return oldValue.TargetTypeID, nil
}

// ResetTargetTypeID resets all changes to the "target_type_id" field.
func (m *QrTargetMutation) ResetTargetTypeID() {
	m.targettype = nil
}

// SetTarget sets the "target" field.
func (m *QrTargetMutation) SetTarget(s string) {
	m.target = &s
}

// Target returns the value of the "target" field in the mutation.
func (m *QrTargetMutation) Target() (r string, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "target" field's value of the QrTarget entity.
// If the QrTarget object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QrTargetMutation) OldTarget(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// ClearTarget clears the value of the "target" field.
func (m *QrTargetMutation) ClearTarget() {
	m.target = nil
	m.clearedFields[qrtarget.FieldTarget] = struct{}{}
}

// TargetCleared returns if the "target" field was cleared in this mutation.
func (m *QrTargetMutation) TargetCleared() bool {
	_, ok := m.clearedFields[qrtarget.FieldTarget]
	return ok
}

// ResetTarget resets all changes to the "target" field.
func (m *QrTargetMutation) ResetTarget() {
	m.target = nil
	delete(m.clearedFields, qrtarget.FieldTarget)
}

// SetTargettypeID sets the "targettype" edge to the TargetType entity by id.
func (m *QrTargetMutation) SetTargettypeID(id int) {
	m.targettype = &id
}

// ClearTargettype clears the "targettype" edge to the TargetType entity.
func (m *QrTargetMutation) ClearTargettype() {
	m.clearedtargettype = true
	m.clearedFields[qrtarget.FieldTargetTypeID] = struct{}{}
}

// TargettypeCleared reports if the "targettype" edge to the TargetType entity was cleared.
func (m *QrTargetMutation) TargettypeCleared() bool {
	return m.clearedtargettype
}

// TargettypeID returns the "targettype" edge ID in the mutation.
func (m *QrTargetMutation) TargettypeID() (id int, exists bool) {
	if m.targettype != nil {
		return *m.targettype, true
	}
	return
}

// TargettypeIDs returns the "targettype" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargettypeID instead. It exists only for internal usage by the builders.
func (m *QrTargetMutation) TargettypeIDs() (ids []int) {
	if id := m.targettype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargettype resets all changes to the "targettype" edge.
func (m *QrTargetMutation) ResetTargettype() {
	m.targettype = nil
	m.clearedtargettype = false
}

// Where appends a list predicates to the QrTargetMutation builder.
func (m *QrTargetMutation) Where(ps ...predicate.QrTarget) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QrTargetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QrTargetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QrTarget, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QrTargetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QrTargetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QrTarget).
func (m *QrTargetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QrTargetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.targettype != nil {
		fields = append(fields, qrtarget.FieldTargetTypeID)
	}
	if m.target != nil {
		fields = append(fields, qrtarget.FieldTarget)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QrTargetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qrtarget.FieldTargetTypeID:
		return m.TargetTypeID()
	case qrtarget.FieldTarget:
		return m.Target()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QrTargetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qrtarget.FieldTargetTypeID:
		return m.OldTargetTypeID(ctx)
	case qrtarget.FieldTarget:
		return m.OldTarget(ctx)
	}
	return nil, fmt.Errorf("unknown QrTarget field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QrTargetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qrtarget.FieldTargetTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetTypeID(v)
		return nil
	case qrtarget.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	}
	return fmt.Errorf("unknown QrTarget field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QrTargetMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QrTargetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QrTargetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QrTarget numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QrTargetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(qrtarget.FieldTarget) {
		fields = append(fields, qrtarget.FieldTarget)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QrTargetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QrTargetMutation) ClearField(name string) error {
	switch name {
	case qrtarget.FieldTarget:
		m.ClearTarget()
		return nil
	}
	return fmt.Errorf("unknown QrTarget nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QrTargetMutation) ResetField(name string) error {
	switch name {
	case qrtarget.FieldTargetTypeID:
		m.ResetTargetTypeID()
		return nil
	case qrtarget.FieldTarget:
		m.ResetTarget()
		return nil
	}
	return fmt.Errorf("unknown QrTarget field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QrTargetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.targettype != nil {
		edges = append(edges, qrtarget.EdgeTargettype)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QrTargetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case qrtarget.EdgeTargettype:
		if id := m.targettype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QrTargetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QrTargetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QrTargetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtargettype {
		edges = append(edges, qrtarget.EdgeTargettype)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QrTargetMutation) EdgeCleared(name string) bool {
	switch name {
	case qrtarget.EdgeTargettype:
		return m.clearedtargettype
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QrTargetMutation) ClearEdge(name string) error {
	switch name {
	case qrtarget.EdgeTargettype:
		m.ClearTargettype()
		return nil
	}
	return fmt.Errorf("unknown QrTarget unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QrTargetMutation) ResetEdge(name string) error {
	switch name {
	case qrtarget.EdgeTargettype:
		m.ResetTargettype()
		return nil
	}
	return fmt.Errorf("unknown QrTarget edge %s", name)
}

// TargetTypeMutation represents an operation that mutates the TargetType nodes in the graph.
type TargetTypeMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_type             *string
	clearedFields     map[string]struct{}
	qr_targets        map[uuid.UUID]struct{}
	removedqr_targets map[uuid.UUID]struct{}
	clearedqr_targets bool
	done              bool
	oldValue          func(context.Context) (*TargetType, error)
	predicates        []predicate.TargetType
}

var _ ent.Mutation = (*TargetTypeMutation)(nil)

// targettypeOption allows management of the mutation configuration using functional options.
type targettypeOption func(*TargetTypeMutation)

// newTargetTypeMutation creates new mutation for the TargetType entity.
func newTargetTypeMutation(c config, op Op, opts ...targettypeOption) *TargetTypeMutation {
	m := &TargetTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeTargetType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetTypeID sets the ID field of the mutation.
func withTargetTypeID(id int) targettypeOption {
	return func(m *TargetTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *TargetType
		)
		m.oldValue = func(ctx context.Context) (*TargetType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TargetType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTargetType sets the old TargetType of the mutation.
func withTargetType(node *TargetType) targettypeOption {
	return func(m *TargetTypeMutation) {
		m.oldValue = func(context.Context) (*TargetType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TargetType entities.
func (m *TargetTypeMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TargetTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TargetType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *TargetTypeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TargetTypeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TargetType entity.
// If the TargetType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetTypeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TargetTypeMutation) ResetType() {
	m._type = nil
}

// AddQrTargetIDs adds the "qr_targets" edge to the QrTarget entity by ids.
func (m *TargetTypeMutation) AddQrTargetIDs(ids ...uuid.UUID) {
	if m.qr_targets == nil {
		m.qr_targets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.qr_targets[ids[i]] = struct{}{}
	}
}

// ClearQrTargets clears the "qr_targets" edge to the QrTarget entity.
func (m *TargetTypeMutation) ClearQrTargets() {
	m.clearedqr_targets = true
}

// QrTargetsCleared reports if the "qr_targets" edge to the QrTarget entity was cleared.
func (m *TargetTypeMutation) QrTargetsCleared() bool {
	return m.clearedqr_targets
}

// RemoveQrTargetIDs removes the "qr_targets" edge to the QrTarget entity by IDs.
func (m *TargetTypeMutation) RemoveQrTargetIDs(ids ...uuid.UUID) {
	if m.removedqr_targets == nil {
		m.removedqr_targets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.qr_targets, ids[i])
		m.removedqr_targets[ids[i]] = struct{}{}
	}
}

// RemovedQrTargets returns the removed IDs of the "qr_targets" edge to the QrTarget entity.
func (m *TargetTypeMutation) RemovedQrTargetsIDs() (ids []uuid.UUID) {
	for id := range m.removedqr_targets {
		ids = append(ids, id)
	}
	return
}

// QrTargetsIDs returns the "qr_targets" edge IDs in the mutation.
func (m *TargetTypeMutation) QrTargetsIDs() (ids []uuid.UUID) {
	for id := range m.qr_targets {
		ids = append(ids, id)
	}
	return
}

// ResetQrTargets resets all changes to the "qr_targets" edge.
func (m *TargetTypeMutation) ResetQrTargets() {
	m.qr_targets = nil
	m.clearedqr_targets = false
	m.removedqr_targets = nil
}

// Where appends a list predicates to the TargetTypeMutation builder.
func (m *TargetTypeMutation) Where(ps ...predicate.TargetType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TargetTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TargetTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TargetType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TargetTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TargetTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TargetType).
func (m *TargetTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._type != nil {
		fields = append(fields, targettype.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case targettype.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case targettype.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown TargetType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case targettype.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown TargetType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TargetType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TargetType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetTypeMutation) ResetField(name string) error {
	switch name {
	case targettype.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown TargetType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.qr_targets != nil {
		edges = append(edges, targettype.EdgeQrTargets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case targettype.EdgeQrTargets:
		ids := make([]ent.Value, 0, len(m.qr_targets))
		for id := range m.qr_targets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedqr_targets != nil {
		edges = append(edges, targettype.EdgeQrTargets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case targettype.EdgeQrTargets:
		ids := make([]ent.Value, 0, len(m.removedqr_targets))
		for id := range m.removedqr_targets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqr_targets {
		edges = append(edges, targettype.EdgeQrTargets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case targettype.EdgeQrTargets:
		return m.clearedqr_targets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TargetType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetTypeMutation) ResetEdge(name string) error {
	switch name {
	case targettype.EdgeQrTargets:
		m.ResetQrTargets()
		return nil
	}
	return fmt.Errorf("unknown TargetType edge %s", name)
}
